import { vi } from 'vitest';
import type { MetricsData } from '../../types/monitoring-types';

// Mock data
export const mockMetricsData: MetricsData[] = [{
  endpoint: 'test_endpoint',
  total_successes: 95,
  total_errors: 5,
  avg_response_time: 150,
  success_rate: 95,
  latest_success: '2024-01-01T00:00:00Z',
  latest_error: '2024-01-01T00:00:00Z',
  health_status: 'healthy'
}];

// Create mock response builder
export const createMockSupabaseResponse = (data: any = null, error: any = null) => ({
  data,
  error,
  count: null,
  status: error ? 500 : 200,
  statusText: error ? "Error" : "OK",
  eq: vi.fn(),
  neq: vi.fn(),
  gt: vi.fn(),
  gte: vi.fn(),
  lt: vi.fn(),
  lte: vi.fn(),
  like: vi.fn(),
  ilike: vi.fn(),
  is: vi.fn(),
  in: vi.fn(),
  contains: vi.fn(),
  containedBy: vi.fn(),
  rangeLt: vi.fn(),
  rangeGt: vi.fn(),
  rangeGte: vi.fn(),
  rangeLte: vi.fn(),
  rangeAdjacent: vi.fn(),
  overlaps: vi.fn(),
  match: vi.fn(),
  imatch: vi.fn(),
  not: vi.fn(),
  or: vi.fn(),
  filter: vi.fn(),
  order: vi.fn(),
  limit: vi.fn(),
  range: vi.fn(),
  abortSignal: vi.fn(),
  single: vi.fn(),
  maybeSingle: vi.fn(),
  csv: vi.fn(),
  then: vi.fn(),
  select: vi.fn(),
  likeAllOf: vi.fn(),
  likeAnyOf: vi.fn(),
  ilikeAllOf: vi.fn(),
  ilikeAnyOf: vi.fn(),
  textSearch: vi.fn(),
  textSearchAllOf: vi.fn(),
  textSearchAnyOf: vi.fn(),
  withTextSearch: vi.fn(),
  withTextSearchAllOf: vi.fn(),
  withTextSearchAnyOf: vi.fn(),
  fts: vi.fn(),
  plfts: vi.fn(),
  phfts: vi.fn(),
  wfts: vi.fn(),
  cs: vi.fn(),
  cd: vi.fn(),
  ova: vi.fn(),
  ovr: vi.fn(),
  sl: vi.fn(),
  sr: vi.fn(),
  nxl: vi.fn(),
  nxr: vi.fn(),
  adj: vi.fn(),
  geojson: vi.fn(),
  explain: vi.fn(),
  rollback: vi.fn(),
  returns: vi.fn(),
  execute: vi.fn(),
  schema: vi.fn(),
  snapshot: vi.fn(),
  alter: vi.fn(),
  upsert: vi.fn(),
  delete: vi.fn(),
  insert: vi.fn(),
  update: vi.fn()
});